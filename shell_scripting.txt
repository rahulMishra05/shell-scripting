		SHELL SCRIPTING NOTES
*************************************************************************

			VIDEO 1

1. To see how many shells are present just type "cat /etc/shells"

2. To see the location of bash just type "which bash"

3. To create a file type "touch <file-name>". When we create a file using touch command it have read and write permision
	not execute permision

4. To create a file and edit it using GNU editor type "nano <file-name>"

5. ".sh" is the extension of shell script file.

6. "chmod +x <file_name>" by this we can give execute permision to any file, if it does not have execute permision.


			VIDEO 2

7. Comment can be added using "#" sign.

8. Variables:
	@ Varibales are container which stores some insde them.
	@ There are two types of variables "system variables" and user defined variables.
	@ System variables are created and maintained by the Linux or Unix system itself. These variables are standard variables defined by thr
		operating system. The standard convension is that they are capital case.
	@ User difned varilables are created and maintained by the user like us. Generally these variables are defined in lower case.

9. System variable:
	@ "$BASH": This will give you the name of your shell.
	@ "$BASH_VERSION": This will give the version of the bash you are using.
	@ "$HOME": This will give the address of home directory.
	@ "$PWD": It stands for present working directory, this will give us the address of present working directory.

10. User defined variable:
	@ We can define a varialbe in this way " <variable_name> = <value> ". And can call it like this " echo $<variable_name>"
	@ Your variable name should not start with number, beacsue shell will not consuder it as a variable then 


			VIDEO 3

11. Read command takes input from the user and assign it to the user.
	We store the input in the variable and then we can use that variable where ever we want.
	If we want to take multiple inputs then we can simply do that by passing multiple variables after the read command.
	If we want to take the input in the same line in which message is shown we can do this " read -p '<message>' <variable_name> "
		We sue -p flag with reda to this.
	If you do not want to show the input user is writing on the screen as in the case of password you can use -sp flag after read
	We can take input in the array from the user by using a flag after read command "-a"
	When we do not write any variable name after the read command, then the input will go inside the built-in variable "REPLY" and we can call
		it to see or access the data of the input.


			VIDEO 4

12. Passing argument:
	@ We can pass arguments to a script when we are executing it. To do so we have to write this command "echo $1 $2 $3", whne we run the script
		at that time we can give three input and they will be printed on the scree. If we want to print the name of the file (shell file) then we can add this 
		" echo $0 $1 $2 $3" again we can pass three variable but in this case name of the file will also be shown because the name of the file get stored in 0th variable.
	@ Another way to do the same is by using the default variable "$@", <arrya_name>=("$@")
		We have to declare a array which will store the argumnet, and then we can print it in the same way we print array on the screen just like this.
		"echo ${<array_name>[0]} ${<array_name>[1]}"
		If we want to print all the arguments then we can write this command "echo $@"
		If we want to find the number of arguments passed then we can simply use this command "echo $#" this will print the number of arguments passed.


			
			VIDEO 5

13. if-else:
	# Interger comparision:
		@ -eq: is euqal to
		@ -ne: is not equal to
		@ -gt: is greater than 
		@ -ge: is greater than or equal to
		@ -lt: is less than
		@ -le: is less than or equal to
		@ < : is less than
		@ <= : is less than pr equal to
		@ > : is greater than 
		@ >= : is greater than or equal to
	# String comparision:
		@ = : is equal to
		@ == : is equal to
		@ != : is not equal to
		@ < : is less than, in ASCII alphabetical order
		@ > : is greater than, in ASCII alphabetical order
		@ -z : string is null, that is, hazero length 


			VIDEO 6

14. If we want to keep the cursor on the same line after printing the echo command we can  do this by 
	" echo -e "Enter any thing : \c" " Here "\c" is being to keep the cursor on the same line and if we do not use "-e" flag
	after echo then \c will also get print on the screen  and the cursor will go in next line.

15. If we want to check the file exeist or not then in if condidtion we can use "-e" flag for it.

16. Similarly "-f" flag in if condition is used to check that if the file exesit and is it the regular file or not.

17, In the same way of we want to check for the directories we can use "-d" falg in if condition.

18. There are two types of file "block special" and "character special"

19. Character special file is the file which consist of character and like some data or code etc

20 Block special file is the file which consist binary data or picture or video etc.

21. To check the file is block special we can use "-b" flag in if condition and to check for character special file we use "-c" in if condition.

22. If we want to check that wheter the file is empty or not we use "-s" flag.

23. If you want to check that file have read permision then use "-r" flag. If you want to check that file have write permision then use "-w" flag, 
	And if you to check that the file contain wheter it has execute permission or not then use "-x" flag.


			VIDEO 7

24. If we want to add some data in the end of the file we can do that in this way.
	@ First we will check wheter that file exist or not and that the file is regular file or not.
	@ If it has read permission then we will ckech the file has write permission or not.
	@ We can add some data at the end of the file by this this command " cat >> <file_name> ", remember that if we use ">>" this means that we want to add 
		some data at the end of the file, but if we use ">" after cat command then it means that we want to overwrite the file.
	@ If the file do not have write permission then we will print that file does not have write permission and program will exit.
	@ Similarly, if the file do not exist then also the program will exit after a message that file doesn't exist.

25. Note: To remove the write permission form the file we can write this command "chmod -w <file_name>", and if we want to give write permission to the 
	file we will write "chmod +w <file_name>"


			VIDEO 8 

26. We are using AND operator with if condition to solve a problem
	@ If the age is greater than 18 and less than 30 then we will print success
	@ Otherwise we will print fail
	@ The syntax of if condition for this problem will be "if ["$<variable_name>" -gt 18] && ["$<variable_name>" -lt 30]"  
	@ There are two ways to use AND operator, we are using "&&" in our example.
	@ If AND operator is used then both the conditions should be true in order to get true, otherwise it will retuen false.
	@ Another way to use and operator is "if ["$<variable_name>" -gt 18 -a "$<variable_name>" -lt 30]"
	@ In this way we use "-a" flag and it will work same as "&&" but the syntax to write the if condition gets little bit.
	@ If you want to use && operator then there is one more way to do that is by using double square brackets like this 
		"if [[ "$<variable_name>" -gt 18 && "$<variable_name>" -lt 30]]"


			VIDEO 9

27. We are using OR operator with if condition to solve a problem
	@ If the age is greater than 18 OR less that 30 then it will be successuful/ true.
	@ Otherwise it will give false.
	@ The syntax of if condition for this problem will be "if [ "$<varable_name>" -gt 18] || [ "$<variable_name>" -t 30 ]"
	@ If OR operator is used then if only one condition is true, than also it will give true.
	@ Another way to use OR operator is like "if [ "$<variable_name>" -gt 18 -o "$<variable_name>" -lt 30 ]"
	@ In this way we use "-o" flag and it work same as "||" but the syntax to write the if condtipon is changed little bit.
	@ If you want to use || operator then there is one more way to do and that is by using double square brackets like this 
		" if [[ "$<variable_name>" -gt 18 || "$<variable_name>" -lt 30 ]]" 









