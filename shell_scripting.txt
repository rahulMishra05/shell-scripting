		SHELL SCRIPTING NOTES
*************************************************************************

			VIDEO 1

1. To see how many shells are present just type "cat /etc/shells"

2. To see the location of bash just type "which bash"

3. To create a file type "touch <file-name>". When we create a file using touch command it have read and write permision
	not execute permision

4. To create a file and edit it using GNU editor type "nano <file-name>"

5. ".sh" is the extension of shell script file.

6. "chmod +x <file_name>" by this we can give execute permision to any file, if it does not have execute permision.


			VIDEO 2

7. Comment can be added using "#" sign.

8. Variables:
	@ Varibales are container which stores some insde them.
	@ There are two types of variables "system variables" and user defined variables.
	@ System variables are created and maintained by the Linux or Unix system itself. These variables are standard variables defined by thr
		operating system. The standard convension is that they are capital case.
	@ User difned varilables are created and maintained by the user like us. Generally these variables are defined in lower case.

9. System variable:
	@ "$BASH": This will give you the name of your shell.
	@ "$BASH_VERSION": This will give the version of the bash you are using.
	@ "$HOME": This will give the address of home directory.
	@ "$PWD": It stands for present working directory, this will give us the address of present working directory.

10. User defined variable:
	@ We can define a varialbe in this way " <variable_name> = <value> ". And can call it like this " echo $<variable_name>"
	@ Your variable name should not start with number, beacsue shell will not consuder it as a variable then 


			VIDEO 3

11. Read command takes input from the user and assign it to the user.
	We store the input in the variable and then we can use that variable where ever we want.
	If we want to take multiple inputs then we can simply do that by passing multiple variables after the read command.
	If we want to take the input in the same line in which message is shown we can do this " read -p '<message>' <variable_name> "
		We sue -p flag with reda to this.
	If you do not want to show the input user is writing on the screen as in the case of password you can use -sp flag after read
	We can take input in the array from the user by using a flag after read command "-a"
	When we do not write any variable name after the read command, then the input will go inside the built-in variable "REPLY" and we can call
		it to see or access the data of the input.


			VIDEO 4

12. Passing argument:
	@ We can pass arguments to a script when we are executing it. To do so we have to write this command "echo $1 $2 $3", whne we run the script
		at that time we can give three input and they will be printed on the scree. If we want to print the name of the file (shell file) then we can add this 
		" echo $0 $1 $2 $3" again we can pass three variable but in this case name of the file will also be shown because the name of the file get stored in 0th variable.
	@ Another way to do the same is by using the default variable "$@", <arrya_name>=("$@")
		We have to declare a array which will store the argumnet, and then we can print it in the same way we print array on the screen just like this.
		"echo ${<array_name>[0]} ${<array_name>[1]}"
		If we want to print all the arguments then we can write this command "echo $@"
		If we want to find the number of arguments passed then we can simply use this command "echo $#" this will print the number of arguments passed.


			
			VIDEO 5

13. if-else:
	# Interger comparision:
		@ -eq: is euqal to
		@ -ne: is not equal to
		@ -gt: is greater than 
		@ -ge: is greater than or equal to
		@ -lt: is less than
		@ -le: is less than or equal to
		@ < : is less than
		@ <= : is less than pr equal to
		@ > : is greater than 
		@ >= : is greater than or equal to
	# String comparision:
		@ = : is equal to
		@ == : is equal to
		@ != : is not equal to
		@ < : is less than, in ASCII alphabetical order
		@ > : is greater than, in ASCII alphabetical order
		@ -z : string is null, that is, hazero length 









