		SHELL SCRIPTING NOTES
*************************************************************************

			VIDEO 1

1. To see how many shells are present just type "cat /etc/shells"

2. To see the location of bash just type "which bash"

3. To create a file type "touch <file-name>". When we create a file using touch command it have read and write permision
	not execute permision

4. To create a file and edit it using GNU editor type "nano <file-name>"

5. ".sh" is the extension of shell script file.

6. "chmod +x <file_name>" by this we can give execute permision to any file, if it does not have execute permision.


			VIDEO 2

7. Comment can be added using "#" sign.

8. Variables:
	@ Varibales are container which stores some insde them.
	@ There are two types of variables "system variables" and user defined variables.
	@ System variables are created and maintained by the Linux or Unix system itself. These variables are standard variables defined by thr
		operating system. The standard convension is that they are capital case.
	@ User difned varilables are created and maintained by the user like us. Generally these variables are defined in lower case.

9. System variable:
	@ "$BASH": This will give you the name of your shell.
	@ "$BASH_VERSION": This will give the version of the bash you are using.
	@ "$HOME": This will give the address of home directory.
	@ "$PWD": It stands for present working directory, this will give us the address of present working directory.

10. User defined variable:
	@ We can define a varialbe in this way " <variable_name> = <value> ". And can call it like this " echo $<variable_name>"
	@ Your variable name should not start with number, beacsue shell will not consuder it as a variable then 


			VIDEO 3

11. Read command takes input from the user and assign it to the user.
	We store the input in the variable and then we can use that variable where ever we want.
	If we want to take multiple inputs then we can simply do that by passing multiple variables after the read command.
	If we want to take the input in the same line in which message is shown we can do this " read -p '<message>' <variable_name> "
		We sue -p flag with reda to this.
	If you do not want to show the input user is writing on the screen as in the case of password you can use -sp flag after read
	We can take input in the array from the user by using a flag after read command "-a"
	When we do not write any variable name after the read command, then the input will go inside the built-in variable "REPLY" and we can call
		it to see or access the data of the input.


			VIDEO 4

12. Passing argument:
	@ We can pass arguments to a script when we are executing it. To do so we have to write this command "echo $1 $2 $3", whne we run the script
		at that time we can give three input and they will be printed on the scree. If we want to print the name of the file (shell file) then we can add this 
		" echo $0 $1 $2 $3" again we can pass three variable but in this case name of the file will also be shown because the name of the file get stored in 0th variable.
	@ Another way to do the same is by using the default variable "$@", <arrya_name>=("$@")
		We have to declare a array which will store the argumnet, and then we can print it in the same way we print array on the screen just like this.
		"echo ${<array_name>[0]} ${<array_name>[1]}"
		If we want to print all the arguments then we can write this command "echo $@"
		If we want to find the number of arguments passed then we can simply use this command "echo $#" this will print the number of arguments passed.


			
			VIDEO 5

13. if-else:
	# Interger comparision:
		@ -eq: is euqal to
		@ -ne: is not equal to
		@ -gt: is greater than 
		@ -ge: is greater than or equal to
		@ -lt: is less than
		@ -le: is less than or equal to
		@ < : is less than
		@ <= : is less than pr equal to
		@ > : is greater than 
		@ >= : is greater than or equal to
	# String comparision:
		@ = : is equal to
		@ == : is equal to
		@ != : is not equal to
		@ < : is less than, in ASCII alphabetical order
		@ > : is greater than, in ASCII alphabetical order
		@ -z : string is null, that is, hazero length 


			VIDEO 6

14. If we want to keep the cursor on the same line after printing the echo command we can  do this by 
	" echo -e "Enter any thing : \c" " Here "\c" is being to keep the cursor on the same line and if we do not use "-e" flag
	after echo then \c will also get print on the screen  and the cursor will go in next line.

15. If we want to check the file exeist or not then in if condidtion we can use "-e" flag for it.

16. Similarly "-f" flag in if condition is used to check that if the file exesit and is it the regular file or not.

17, In the same way of we want to check for the directories we can use "-d" falg in if condition.

18. There are two types of file "block special" and "character special"

19. Character special file is the file which consist of character and like some data or code etc

20 Block special file is the file which consist binary data or picture or video etc.

21. To check the file is block special we can use "-b" flag in if condition and to check for character special file we use "-c" in if condition.

22. If we want to check that wheter the file is empty or not we use "-s" flag.

23. If you want to check that file have read permision then use "-r" flag. If you want to check that file have write permision then use "-w" flag, 
	And if you to check that the file contain wheter it has execute permission or not then use "-x" flag.


			VIDEO 7

24. If we want to add some data in the end of the file we can do that in this way.
	@ First we will check wheter that file exist or not and that the file is regular file or not.
	@ If it has read permission then we will ckech the file has write permission or not.
	@ We can add some data at the end of the file by this this command " cat >> <file_name> ", remember that if we use ">>" this means that we want to add 
		some data at the end of the file, but if we use ">" after cat command then it means that we want to overwrite the file.
	@ If the file do not have write permission then we will print that file does not have write permission and program will exit.
	@ Similarly, if the file do not exist then also the program will exit after a message that file doesn't exist.

25. Note: To remove the write permission form the file we can write this command "chmod -w <file_name>", and if we want to give write permission to the 
	file we will write "chmod +w <file_name>"


			VIDEO 8 

26. We are using AND operator with if condition to solve a problem
	@ If the age is greater than 18 and less than 30 then we will print success
	@ Otherwise we will print fail
	@ The syntax of if condition for this problem will be "if ["$<variable_name>" -gt 18] && ["$<variable_name>" -lt 30]"  
	@ There are two ways to use AND operator, we are using "&&" in our example.
	@ If AND operator is used then both the conditions should be true in order to get true, otherwise it will retuen false.
	@ Another way to use and operator is "if ["$<variable_name>" -gt 18 -a "$<variable_name>" -lt 30]"
	@ In this way we use "-a" flag and it will work same as "&&" but the syntax to write the if condition gets little bit.
	@ If you want to use && operator then there is one more way to do that is by using double square brackets like this 
		"if [[ "$<variable_name>" -gt 18 && "$<variable_name>" -lt 30]]"


			VIDEO 9

27. We are using OR operator with if condition to solve a problem
	@ If the age is greater than 18 OR less that 30 then it will be successuful/ true.
	@ Otherwise it will give false.
	@ The syntax of if condition for this problem will be "if [ "$<varable_name>" -gt 18] || [ "$<variable_name>" -t 30 ]"
	@ If OR operator is used then if only one condition is true, than also it will give true.
	@ Another way to use OR operator is like "if [ "$<variable_name>" -gt 18 -o "$<variable_name>" -lt 30 ]"
	@ In this way we use "-o" flag and it work same as "||" but the syntax to write the if condtipon is changed little bit.
	@ If you want to use || operator then there is one more way to do and that is by using double square brackets like this 
		" if [[ "$<variable_name>" -gt 18 || "$<variable_name>" -lt 30 ]]" 


			VIDEO 10

28. We are going to see some artihemitic operations.

29 . If you write this command "echo 1+1" then it will print 1+1 in the output, beacuse by deaflut echo consider everything written after it as a string.

30. We can do this by this command "echo $((num1 + num2 ))". Here num1 and mun2 are variables and both the variables contains some value. This command will print the desired result.

31. In the similar way we can also perform other arthemitic operation.

32. Another way to perform an arthimetic operation is by using expr keyword. Like this
	"echo (expr $num1 + $num2)"
	In this way we do not use two palanthesis and also use the variable with $ sign before them.
	One more thing that we can not use * for multiplication it will give an eror, so we will use \* sign for multiplication.


			VIDEO 11

33. We cannot perform arthmitic operatios on decimal using the previous methods, it will give an error.
	For that we use bc which stands for basic calculator.

34. We can use this bc command in this way "echo "20.5+5" | bc"

35. But there is a problem with division that it will not show the values after decimal in the case of division. So to remove that we have to define a variable 
	scale like this "echo "scale=2;20.5+5" | bc"
	Here we can see the value of 2 decimal places as we had passed the value of scale 2   

36. We can also solve calculate square root of some number and also solve trignometric equations using the bc keyword.

37. We can also solve using some variables like this "echo "$<variable_name1>+$<variable_name2>" | bc". Here num1 and num2 are variables which have some value in it.

38. We can calculate the square root of a number in this way "echo "scale=2;sqrt($<variable_name>)" | bc -l". To calculate we have to use a function called sqrt and pass the variable name to it whose square root we want to calculate.
	But to use sqrt function is a math function and we need to call it, so we can call math function by "-l" command.

39. We can also calcualte power of any number like this "echo "scale=2;3^3" | bc -l"

40. You can get more information about bc command by just typing "man bc" in terminal.


	
			VIDEO 12

41. The case statement can be used as an alternate for if conditions.

42. The basic syntax of case statement is like this.
	case expression in 
		pattern1 )
			statements ;;
		pattern2 )
			statement ;;
	esac

Here the ")" after the pattren1 and pattern2 means which is different case are finished. 
And the duoble semicolon ";;" after statement means that this case is true and completely executed.

43. "* )" this is the default comdition of case statement.


			VIDEO 13

44. We are going to find that entered character is capital or small.

45. Firts we will ask for the input from the user, with this command "echo -e "Enter some characters: \c""

46. Then we will store that value is a variable, named as "value"

47. Now we will apply case statement.
	[a-z]: This means that we are expecting a small alphabet from a to z.
	[A-Z]: This means that we are expecting a capital alphabet from A to Z.
	[0-9]: This means that we are expecting an integer from 0 to 9
	? : This means that we are expecting any special character. (Only one special character.)
	
48. If your program doesn't take or recognize the capital alphabets then just type this command in terminal "LANG=C" 



			VIDEO 14

49. We can declare array in this way "<name_of_array_varaible>=("ubuntu" "windows" "kali")"
	By this way we can declare a array and store some values in it.

50. To print all the values of array just write this command "echo ${<name_of_array_varaiblr>[@]}"
	
51. If you want to print a specific value of the array then you can use this command "echo ${<name_of_array_varialbe>[<index_location>]}"
	for example: echo ${os[1]}

52. If you want to print the index of the array then you can do it like this "echo ${!<name_of_array_varriable>[@]}". for example echo ${!os[@]}

53. if you want to print the lenght of the array then you can do it like this "echo ${#<name_of_array_variable>[@]}". For example ecgo ${#os[@]}

54. We can add elements to array in this way <name_of_array_variable>[index_location]="<value>". For example: os[3]='mac'

55. We can update the data of an array in the same way <name_of_array_varialbe>[index_location]="<value>". For example: os[0]='mac'

56. If you want to remove an element form an array then you can do it by using unset command like this "unset <name_of_array_variable>[index_locatoin]". for example unset os[2]


			
			VIDEO 15

57. The syntax of while loop is 
	while [condition]
	do
		command1
		command2
		command3
	done

58. If we want to incrimient the value of the variable we can do that in this way "n=$(( n+1 ))" or (( n++ )) or (( ++n ))



			VIDEO 16

59. If you want to pause the execution of the loop for a while then you can use sleep command. "sleep 1" this will pause the execution of the loop for 1 second.

60. We can open terminal using shell script, in the loop if we write "gnome-terminal &" then the terminal which is present in GNOME desktop will get open.



			VIDEO 17

61. We are going to see how to read file using while loop.

62. "<" we use input redirection for this. This means that the content of the file will be sent to the wjhile loop and there we will 
	store the value of while loop inside a variable and then print then content of that variable line by line.
	while read p
	do
	    echo $p
	done < video17.sh

63. Another way to read the content of file using loop is
	cat <file_name> | while read <variable_name>
	do
		echo $<variable_name>
	done
	
	Here the output of cat command is the input of the while command

64. Some time it is difficult to read the content of the file using this methods.

65. Now we will use IFS (Internal feild sepereater) it used by shell to determine how to do word spiliting

66. Here we are assigning space to IFS, and we use -r beacuse by it, it will not interpret backslash.
	while IFS='' read -r line
	do 
    		echo $line
	done < video17.sh

67. At the place of file we can also give the file present at different location, along with there address
	just like "/etc/someFile.txt"



			VIDEO 18

68. Until loop are slightly different from while loop

69. Syntax of until loop.
	until [ conditoin ]
	do
		command1
		command2
		command3
	done

70. In while loop if the commands are true than only commands get executed. While on the other hand in the until loop if the commans are false then only 
	commands are executed.


			VIDEO 19

71. Syntax of for loop. There are many ways to write the for loop
	- First way
		for VARIBALE in 1 2 3 4 5 . . N
		do
			command1
			commadn2
			commadnN
		done

	- Second way
		for VARIABLE in file1 file2 file3
		do
			command1 on $VARIABLE
			command2
			commandN
		done
	
	- Third way
		for OUTPUT in $(Linux-Or-Unix-Command-Here)
		do
			command1 on $OUTPUT
			command2 on $OUTPUT
			commandN
		done

	- Forth way
		for (( EXP1; EXP2; EXP3 ))
		do
			command1
			command2
			command3
		done

72. We can give the range to interate like this "{1..10}". Here the range is from 1 to 10

73. if we want to specify increment than we can do that in this way. "{1..10..2}". Here the range is from one to 10 and increment will be of 2

74. You can use the above methods only if your bash version is above 4. You can check you bash version by this command "echo ${BASH_VERSION}"



			VIDEO 20

75. We can use for loop to execute commands.
	for command in ls pwd date
	do
		echo "---------$command-----------"
		$command
	done

	@ In this example first "ls" command will get executed then "pwd" command and in last "date" command.

76. Let's solve another problem we have to print the name of all the directories present in any folder using for loop.
	for item in *
	do
		if [ -d $item ]
		then
			echo $item
		fi
	done

	@ Here * will go throught each and every file present in that directory.
	@ If conditoin will check that whether that file is a directory or not, if it directory than its name get printed.


		VIDEO 21

77. Select loop syntax
	select varName in list
	do
		command1
		command2
		commandN
	done

78. The list item will be denoted by different numbers, and to select any specific item from that list 
	you have to enter that number.

79. Its structure is simillar to for loop but the funcitonality is different. It will iterate over the list asnd give us the menu structure.



		VIDEO 22

80. when ever we want to break out of the loop prematuraly than we use break statement.

81. Continue will skip the execution when its conidition  is meet.





















